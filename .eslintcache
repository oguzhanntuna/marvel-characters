[{"D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\index.js":"1","D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\App.js":"2","D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\reportWebVitals.js":"3","D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\containers\\LandingPage\\LandingPage.js":"4","D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\hoc\\Layout\\Layout.js":"5","D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\components\\Navigation\\Toolbar\\Toolbar.js":"6","D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\components\\Characters\\Characters.js":"7","D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\components\\UI\\Modal\\Modal.js":"8","D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\components\\UI\\Backdrop\\Backdrop.js":"9","D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\components\\UI\\Spinner\\Spinner.js":"10"},{"size":502,"mtime":1610913433472,"results":"11","hashOfConfig":"12"},{"size":283,"mtime":1610913419685,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":213,"mtime":1610909247120,"results":"15","hashOfConfig":"12"},{"size":426,"mtime":1610908504899,"results":"16","hashOfConfig":"12"},{"size":340,"mtime":1610899684551,"results":"17","hashOfConfig":"12"},{"size":6784,"mtime":1610912248216,"results":"18","hashOfConfig":"12"},{"size":616,"mtime":1610833897352,"results":"19","hashOfConfig":"12"},{"size":245,"mtime":1610833699638,"results":"20","hashOfConfig":"12"},{"size":185,"mtime":1610908123949,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"7ildxd",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\index.js",[],["45","46"],"D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\App.js",[],"D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\reportWebVitals.js",[],"D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\containers\\LandingPage\\LandingPage.js",[],"D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\hoc\\Layout\\Layout.js",[],"D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\components\\Navigation\\Toolbar\\Toolbar.js",[],"D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\components\\Characters\\Characters.js",["47","48"],"import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport md5 from 'md5';\r\n\r\nimport styles from './Characters.module.scss';\r\nimport Modal from '../UI/Modal/Modal';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\n\r\nconst Characters = props => {\r\n    const [characters, setCharacters] = useState([]);\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [fetching, setFetching] = useState(false);\r\n\r\n    const [selectedCharacter, setSelectedCharacter] = useState(null);\r\n    const [characterModal, setCharacterModal] = useState(null);\r\n    const [modalState, setModalState] = useState(false);\r\n\r\n    const observer = useRef();\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const limit = useState(30)[0];\r\n    const [offset, setOffset] = useState(0);\r\n\r\n    const lastCharacterElementRef = useCallback(node => {   \r\n        if (loading) return;\r\n        if (observer.current) observer.current.disconnect();\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries[0].isIntersecting) {\r\n                setPageNumber(prevPageNumber => prevPageNumber + 1);   \r\n            }\r\n        });\r\n        if (node) observer.current.observe(node);\r\n    }, [loading]);\r\n\r\n    // Fetching characters data from Marvel's API.\r\n    useEffect(() => {\r\n        setFetching(true);\r\n        setLoading(true);\r\n\r\n        const ts = `1`;\r\n        const publicKey = `ba73c1557e66b8a55b0e96f5fd01e534`;\r\n        const privateKey = `6052319c409e3777acee874a69c60d6d56952650`;\r\n        const hash = md5(`${ts}${privateKey}${publicKey}`);\r\n        const URL = `http://gateway.marvel.com/v1/public/characters?limit=${limit}&offset=${offset}&ts=${ts}&apikey=${publicKey}&hash=${hash}`;\r\n\r\n        axios.get(URL)\r\n            .then(response => {\r\n                setFetching(false);\r\n                setLoading(false);\r\n                setOffset(prevOffset => prevOffset + limit);\r\n                setCharacters(prevCharacters => {\r\n                    return [...prevCharacters,\r\n                            ...response.data.data.results.map((char, index) => {\r\n                                const characterImage = `${char.thumbnail.path}.${char.thumbnail.extension}`;\r\n                                const characterComics = char.comics.items.map((comics, index) => {\r\n                                    // Comics limit to render. (limit = 10, as mentioned in the challange)\r\n                                    if (index <= 9) {\r\n                                        return (\r\n                                            <li key={comics.name}>{comics.name}</li>\r\n                                        )\r\n                                    } \r\n                                })                         \r\n                                   \r\n                                // Adding a \"ref\" property to the last element on the screen with ternary operator otherwise it's just a normal element.\r\n                                return (\r\n                                    <div \r\n                                        key={char.id} \r\n                                        className={styles.characterCard}\r\n                                        ref={response.data.data.results.length === index + 1\r\n                                            ? lastCharacterElementRef\r\n                                            : null}\r\n                                        onClick={() => characterSelectHandler(char = \r\n                                            {name: char.name,\r\n                                            description: char.description,\r\n                                            image: characterImage,\r\n                                            comics: [...characterComics]}\r\n                                        )}>\r\n                                        <span>{char.name}</span>\r\n                                        <div className={styles.characterImageContainer}>\r\n                                            <img src={characterImage} alt=\"Character\" />\r\n                                        </div>\r\n                                    </div>\r\n                                )                                    \r\n                            })\r\n                    ];\r\n                });          \r\n            })\r\n            .catch(error => {\r\n                setFetching(false);\r\n                setLoading(false);\r\n                setError(true);\r\n            });\r\n    }, [pageNumber]);\r\n\r\n    // Showing details(modal) for the selected character if there is one.\r\n    useEffect(() => {\r\n        if(selectedCharacter) {\r\n            setCharacterModal(\r\n                <Modal show={modalState} modalClosed={closeModalHandler}>\r\n                    <div className={styles.characterModal}>\r\n                        <div className={styles.name}>\r\n                            <span>{selectedCharacter.name}</span>\r\n                        </div>\r\n                        <div className={styles.main}>\r\n                            <div className={styles.selectedCharacterImageContainer}>\r\n                                <img src={selectedCharacter.image} alt=\"Selected Character\"/>\r\n                            </div>\r\n                                <div className={styles.description}>\r\n                                    <span>Description</span>\r\n                                    {selectedCharacter.description \r\n                                        ? <p>{selectedCharacter.description}</p>\r\n                                        : <p>No info</p>}\r\n                                 </div>\r\n                        </div>\r\n                        <div className={styles.comics}>\r\n                            <span>Comics which feature this character</span>\r\n                            <ul>{selectedCharacter.comics.length \r\n                                ? selectedCharacter.comics \r\n                                : <li>No info</li>}</ul>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            );\r\n        }\r\n    }, [selectedCharacter, modalState]);\r\n    \r\n    const characterSelectHandler = (char) => {\r\n        setSelectedCharacter(char);\r\n        setModalState(true);\r\n    }\r\n\r\n    const closeModalHandler = () => {\r\n        setModalState(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={styles.charactersContainer}>\r\n                {characters}    \r\n                <div className={styles.Error}>{error && 'Something went wrong...'}</div>        \r\n            </div>\r\n            {fetching && <Spinner />}   \r\n            {characterModal}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Characters;\r\n","D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\components\\UI\\Modal\\Modal.js",[],"D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\components\\UI\\Backdrop\\Backdrop.js",[],["49","50"],"D:\\FrontEnd Things\\Projects\\marvel-characters\\src\\components\\UI\\Spinner\\Spinner.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":56,"column":95,"nodeType":"57","messageId":"58","endLine":56,"endColumn":97},{"ruleId":"59","severity":1,"message":"60","line":94,"column":8,"nodeType":"61","endLine":94,"endColumn":20,"suggestions":"62"},{"ruleId":"51","replacedBy":"63"},{"ruleId":"53","replacedBy":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'lastCharacterElementRef', 'limit', and 'offset'. Either include them or remove the dependency array.","ArrayExpression",["67"],["65"],["66"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [lastCharacterElementRef, limit, offset, pageNumber]",{"range":"70","text":"71"},[4551,4563],"[lastCharacterElementRef, limit, offset, pageNumber]"]